/*
  //IMPORTANT 1: DON'T RETURN in a void function (except for base case)
*/

class Solution {
public:
    vector<int> preorder(Node* root) {
        vector<int> preorder;
        recursive(root,preorder);
        return preorder;
    }
    
    //helper function
    void recursive(Node* element, vector<int> & preorder){
        //base
        if(element==nullptr){
            return;
        }
        preorder.push_back(element->val);
        for(int i=0;i<element->children.size();i++){
              //preorder.push_back(element->children[i]->val);
              
            //IMPORTANT 1: NO return!
            recursive(element->children[i],preorder);
        }
    }
    
    
/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/
    
};
