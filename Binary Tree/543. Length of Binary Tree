/*
    //IMPORTANT 1: HOW Binary Tree Parse in Recursion (left & right)
    //IMPORTANT 2: Add 1 for every "level" of the tree
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:
    
    int height(TreeNode* root, int & diameter){
        if(root==NULL){
            return 0;
        }
        
        //IMPORTANT 1: HOW Binary Tree Parse in Recursion (left & right)
        int left = height(root->left,diameter); //This guy keeps parsing until the "leftmost" element.
                                                //This leftmost element will hit NULL and return 1+max(0,0)
                                                
        int right = height(root->right,diameter); //Then comes the first "right" element of the "leftmost" element. And so on.
        
        
        //IMPORTANT 2: Add 1 for every "level" of the tree
        diameter = max(left+right,diameter); //We constantly change the diameter to record the max.
        
        return(1+max(left,right));
    }
    int diameterOfBinaryTree(TreeNode* root) {
        cout<<max(1,5)<<endl;
        if(root==NULL){
            return 0;
        }
        int diameter = 0;
        
        int h = height(root,diameter);
        
        return diameter;
        
    }
    

};
