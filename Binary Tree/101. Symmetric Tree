/*
Write a bool function returning that the following symmetric tree is TRUE.
           1
      2         2
    3  4       4  3
    
Algorithm: 
  1. Store above into a vector
  2. Compare and if not same, return FALSE.
        if(pre[size-i] != pre[half-i]){
            return false;
         }
    
*/


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    
    //when N=1, return true
    //when N=3, if 1st=2nd, return true
public:
    //Effect: returns vector {head, â€¦., bottom} of binary tree
    vector<int> revOrder(TreeNode* root) {
        vector<int> revOrder;
        recursive(root,revOrder);
        return revOrder;
    }

    //helper function of revOrder
    void recursive(TreeNode* element, vector<int> & revOrder){
        //base
        if(element==nullptr){
            return;
        }

        recursive(element->left,revOrder);
        recursive(element->right,revOrder);
        revOrder.push_back(element->val);
    }

    bool isSymmetric(TreeNode* root)
    {
        //when N=1
        if(root->left && root->right){
            return true;
        }

        ///Compare(N+1-n)th with (N-1)/2. If all same, return true
        //First sort all elements into a sorted array
        vector<int> pre = revorder(root);
        //Then compare the N-i th with half-i th. If
        int half = (pre.size()+1)/2; //eg. 4 if [1,2,3,4,5,6,7]
        int size = pre.size(); //eg. 7 if [1,2,3,4,5,6,7]
        for(int i=0;i+2<half;i++){
            if(pre[size-i]!=pre[half-i]){
                return false;
            }
        }
        return true;
    }
};
